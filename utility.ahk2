#Requires AutoHotkey v2.0

; * utility functions for AHKv2 scripts
; * use `#Include` to import functions here into your own scripts

; Note: in ahk v2, vars in functions are default to local,
; so needn't specify local to avoid name collision ^_^
;

; Toggle the program window `WinTitle`. If not exist, it'll try to launch
; with `RunCommand` \
;
; e.g. use Win+Alt+Space to toggle Windows Termianl: \
; #!Space:: Invoker("ahk_exe WindowsTerminal.exe", "wt")
;
Invoker(WinTitle, RunCommand) {
    ; WinTitle: to match the window
    ; runCommand: command used to open app
    if (hwnd := WinExist(WinTitle)) {
        minmaxState := WinGetMinMax(hwnd)
        activeState := WinActive(hwnd)

        if (minmaxState == -1) {	; minimized
            WinRestore(hwnd)
            WinActivate(hwnd)
        } else if not (activeState) {	; non-minimized & inactive
            WinActivate(hwnd)
        } else {	; non-minimized & active
            WinMinimize(hwnd)
        }
    } else {
        Run(RunCommand)
        WinActivate(WinWait(WinTitle))	; activate the new window
    }
}

; Run given program `Task` if it hasn't started. By default,
; the filename of `Task` is inferred as process name. \
; \
; But if your `task` is complex script,
; you may manually specify `ProcessMatcher`(case-insensitive Name or PID).
;
RunIfNotExist(Task, ProcessMatcher?) {
    local InferredProcessMatcher
    if !IsSet(ProcessMatcher) {
        SplitPath(Task, &InferredProcessMatcher)
    } else {
        InferredProcessMatcher := ProcessMatcher
    }

    if !ProcessExist(InferredProcessMatcher) {
        Run(Task)
    }
}

; Count the number with specified name(case-insensitive) \
;
; This is useful because all built-in ahk process functions are case-insensitive,
; some possible workarounds may need process count info.
ProcessCount(CaseInsensitiveName) {
    ; Implemented using COM
    Count := 0
    for Process in ComObjGet("winmgmts:").ExecQuery("Select * from Win32_Process") {
        if Process.Name = CaseInsensitiveName {
            Count += 1
        }
    }
    return Count
}

; TODO: implement case-sensitive process functions, something like ProcessExistS etc.